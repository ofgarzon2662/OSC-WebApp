name: Creation of Release Branhc and PR to main
on:
  push:
    branches:
      - 'develop'

permissions:
  contents: write
  pull-requests: write

jobs:
  tests:
    name: Tests
    if: ${{ contains(github.event.head_commit.message, 'RELEASE') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to develop branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.18.3'

      - name: Install dependencies
        run: npm install


      - name: Run unit tests
        run: |
          npx ng test --no-watch --browsers=ChromeHeadless --code-coverage | tee test-output.txt
          if grep -q "FAILED" test-output.txt; then
            echo "Tests failed, aborting workflow."
            exit 1
          fi

      - name: Extract and Validate Coverage for Statements, Lines, Branches, and Functions
        run: |
          # Extract coverage values from the output, ensuring they default to 0 if missing
          STATEMENTS_COVERAGE=$(grep "Statements" test-output.txt | awk '{print $3}' | tr -d '%' || echo 0)
          LINES_COVERAGE=$(grep "Lines" test-output.txt | awk '{print $3}' | tr -d '%' || echo 0)
          BRANCHES_COVERAGE=$(grep "Branches" test-output.txt | awk '{print $3}' | tr -d '%' || echo 0)
          FUNCTIONS_COVERAGE=$(grep "Functions" test-output.txt | awk '{print $3}' | tr -d '%' || echo 0)

          # Debugging output
          echo "Extracted Coverage Percentages:"
          echo "Statements: ${STATEMENTS_COVERAGE:-0}%"
          echo "Lines: ${LINES_COVERAGE:-0}%"
          echo "Branches: ${BRANCHES_COVERAGE:-0}%"
          echo "Functions: ${FUNCTIONS_COVERAGE:-0}%"

          # Define minimum required coverage
          MIN_COVERAGE=70

          # Check if coverage meets the threshold
          if [ "$STATEMENTS_COVERAGE" -lt $MIN_COVERAGE ]; then
            echo "❌ Statements coverage ($STATEMENTS_COVERAGE%) is below $MIN_COVERAGE%."
            exit 1
          fi
          if [ "$LINES_COVERAGE" -lt $MIN_COVERAGE ]; then
            echo "❌ Lines coverage ($LINES_COVERAGE%) is below $MIN_COVERAGE%."
            exit 1
          fi
          if [ "$BRANCHES_COVERAGE" -lt $MIN_COVERAGE ]; then
            echo "❌ Branches coverage ($BRANCHES_COVERAGE%) is below $MIN_COVERAGE%."
            exit 1
          fi
          if [ "$FUNCTIONS_COVERAGE" -lt $MIN_COVERAGE ]; then
            echo "❌ Functions coverage ($FUNCTIONS_COVERAGE%) is below $MIN_COVERAGE%."
            exit 1
          fi

          echo "✅ All coverage metrics meet the required threshold of $MIN_COVERAGE%!"

      - name: Coverage Passed
        run: echo "✅ Coverage is sufficient!"

      - name: Sanitize commit message for branch name
        id: sanitize_message
        run: |
          # Sanitize the commit message to create a valid branch name
          BRANCH_NAME=$(echo "${{ github.event.head_commit.message }}" | sed -e 's/[^a-zA-Z0-9._-]/-/g' | cut -c1-50)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create a new release branch from develop
        run: |
          git checkout -b $BRANCH_NAME develop
          git push origin $BRANCH_NAME

      - name: Create a PR to Master
        uses: peter-evans/create-pull-request@v5
        with:
          title: ${{ env.BRANCH_NAME }}
          body: ${{ github.event.head_commit.message }}
          head: ${{ env.BRANCH_NAME }}
